name: release

on:
  push:
    branches:
      - "**"     # Trigger on all branches
  workflow_dispatch:  # Allow manual run

jobs:
  details:
    runs-on: ubuntu-latest
    outputs:
      package_name: ${{ steps.package_information.outputs.package_name }}
      new_version: ${{ steps.versioning.outputs.new_version }}
    steps:
      - uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.12"
          cache: "poetry"

      - name: Get Name of Package
        id: package_information
        run: |
          package_information=$(poetry version)
          PACKAGE_NAME=$(echo $package_information | awk '{print $1}')
          echo "package_name=$PACKAGE_NAME" >> "$GITHUB_OUTPUT"
          echo "Package name: $PACKAGE_NAME"

      - name: Determine new version (you can customize this)
        id: versioning
        run: |
          # Example: read version from pyproject.toml directly
          VERSION=$(poetry version | awk '{print $2}')
          echo "new_version=$VERSION" >> "$GITHUB_OUTPUT"
          echo "Version to use: $VERSION"

  check_pypi:
    needs: details
    runs-on: ubuntu-latest
    steps:
      - name: Fetch information from PyPI
        run: |
          PACKAGE_NAME=${{ needs.details.outputs.package_name }}
          response=$(curl -s https://pypi.org/pypi/$PACKAGE_NAME/json || echo "{}")
          latest_previous_version=$(echo $response | grep -oP '"releases":\{"\K[^"]+' | sort -rV | head -n 1)
          if [ -z "$latest_previous_version" ]; then
            latest_previous_version="0.0.0"
          fi
          echo "Latest version on PyPI: $latest_previous_version"
          echo "latest_previous_version=$latest_previous_version" >> $GITHUB_ENV

      - name: Compare versions
        run: |
          NEW_VERSION=${{ needs.details.outputs.new_version }}
          LATEST_VERSION=$latest_previous_version
          if [ "$(printf '%s\n' "$LATEST_VERSION" "$NEW_VERSION" | sort -rV | head -n 1)" != "$NEW_VERSION" ] || [ "$NEW_VERSION" == "$LATEST_VERSION" ]; then
            echo "The new version $NEW_VERSION is not greater than the latest version $LATEST_VERSION on PyPI."
            exit 1
          else
            echo "The new version $NEW_VERSION is greater than the latest version $LATEST_VERSION on PyPI."
          fi

  setup_and_build:
    needs: details
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.12"
          cache: "poetry"

      - name: Set project version with Poetry
        run: |
          poetry version ${{ needs.details.outputs.new_version }}

      - name: Commit version bump
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git checkout -b version-bump-${{ needs.details.outputs.new_version }}
          git add pyproject.toml
          git commit -m "Bump version to ${{ needs.details.outputs.new_version }}"
          git push origin version-bump-${{ needs.details.outputs.new_version }}

      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v4
        with:
          branch: version-bump-${{ needs.details.outputs.new_version }}
          title: "Bump version to ${{ needs.details.outputs.new_version }}"
          body: "This PR bumps the version to ${{ needs.details.outputs.new_version }}."
          labels: "version-bump"

      - name: Install dependencies
        run: poetry install --sync --no-interaction

      - name: Build source and wheel distribution
        run: poetry build

      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: dist
          path: dist/

  pypi_publish:
    name: Upload release to PyPI
    needs: [setup_and_build, details]
    runs-on: ubuntu-latest
    environment:
      name: publish
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          name: dist
          path: dist/

      - name: Publish distribution to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1

  bump-version:
    needs: [details, pypi_publish]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.12"
          cache: "poetry"

      - name: Install Poetry
        run: |
          curl -sSL https://install.python-poetry.org | python3 -
          export PATH="$HOME/.local/bin:$PATH"

      - name: Install dependencies
        run: poetry install

      - name: Bump version (again for safety)
        run: |
          VERSION="${{ needs.details.outputs.new_version }}"
          poetry version $VERSION
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git checkout -b version-bump-${{ needs.details.outputs.new_version }}
          git add pyproject.toml
          git commit -m "Bump version to $VERSION"
          git push origin version-bump-${{ needs.details.outputs.new_version }}

      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v4
        with:
          branch: version-bump-${{ needs.details.outputs.new_version }}
          title: "Bump version to ${{ needs.details.outputs.new_version }}"
          body: "This PR bumps the version to ${{ needs.details.outputs.new_version }}."
          labels: "version-bump"
